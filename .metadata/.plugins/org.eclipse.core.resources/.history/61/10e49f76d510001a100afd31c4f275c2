package FinalProject;
import java.io.File; 
import java.io.*;
import java.util.Scanner; 
import java.util.*;

public class WordProcessor {
	public static void main(String[] args)throws Exception 
	 { 
		//change the file location to where the test.txt is on your desktop, we will implement a system that works better
		//for getting the location later on but this works for now
		String fileLocation = "C:\\Users\\brand\\Desktop\\test.txt";
	    File file = new File(fileLocation); 
	    Scanner in = new Scanner(file);
	    
	    //variables keeping track of commands set to defaults
	    int lineLength = 80;
	    char justified = 'l';
	    boolean wrapping = false;
	    int space = 1;
	    boolean title = false;
	    int paragraph = 0;
	    int blankLine = 0;
	    boolean twoColumns = false;
	    
	    //start reading the file and keep at it until end of file/there is a next line
	    while (in.hasNextLine())
	    {
	    	String currentChar = Character.toString(in.next().charAt(0));
	    	//if it starts with dash it is a command and we need to change defaults
	    	if(currentChar.equals("-"))
	    	{
	    		currentChar = Character.toString(in.next().charAt(0));
	    		switch(currentChar)
	    		{
	    			case("n"):
	    				int temp=in.nextInt(); //we should probably throw error if there is no number following the command n
	    				if(temp<=100)
	    					lineLength = temp;
	    				else //we probably need to change the response to the error to something more apropriate
	    					System.out.println("Error: Lenght selection exceeds maximum!")
	    				break;
	    			case("r"):
	    				break;
	    			case("l"):
	    				break;
	    			case("c"):
	    				break;
	    			case("e"):
	    				break;
	    			case("w"):
	    				break;
	    			case("s"):
	    				break;
	    			case("d"):
	    				break;
	    			case("t"):
	    				break;
	    			case("p"):
	    				break;
	    			case("b"):
	    				break;
	    			case("a"):
	    				break;	    		
	    		}
	    	}
	    	//an integer holding the count of the characters,
		    int numChar = 0;
		    int numWords = 0;
		   
		   //read the string character by character until the size of the string
	    while(numChar < st.length())
	    {
	    	
	    	String currentCommand="";
	    	//if the read character is dash then read until empty space? and add into command array? and we dont need to increase the numChar count because we are not putting them into output txt?
	    	//also we need to be checking if we are not in the actual txt but we are on the command line because the input is read a s one string
	    	if(currentChar.equals("-"))
	    	{
	    		currentCommand=currentCommand+currentChar;
	    		currentChar = Character.toString(in.next().charAt(0));
	    		while (!currentChar.equals(" ")) {
	    			currentCommand=currentCommand+currentChar;
	    			currentChar = Character.toString(in.next().charAt(0));
	    		}
	    		//i think we need to be checking if the command array is full and if so doubling it
	    		if (numCommands<100)
	    		{
	    			commands[numCommands]=currentCommand;
	    			numCommands++;	
	    		}
	    		else 
	    		{
	    			//double the array and copy it code missing for now
	    			String[] tempArray = new String[commands.length*2];
	    			for(int i=0; i<commands.length; i++)
	    				tempArray[i]=commands[i];
	    			commands = tempArray;
	    			commands[numCommands]=currentCommand;
		    		numCommands++;	
	    		}
	    	}
	    	//if it is not a command either start storing the characters as words somewhere or lines ?!?
	    	//or we can do this whole part once all commands are read and we know how many characters per line/if wrapping is on
	    	else 
	    	{
	    		String word = currentChar;
	    		//making an array to hold a line of words?
	    		String[] line = new String[100];
	    		//we need to count the character
	    		numChar++;
	    		word=word+currentChar;
	    		currentChar = Character.toString(in.next().charAt(0));
	    		while (!currentChar.equals(" ")) {
	    			word=word+currentChar;
	    			currentChar = Character.toString(in.next().charAt(0));	
	    			numChar++;
	    		}
	    		//checking if the array for the line is full and f number of characters is exactly divisable by 100s
	    		if ((numWords+1)%100!=0 && numChar%100!=0)
	    		{
	    			
	    			line[(numWords+1)%100]=word;
	    			numWords++;	
	    		}
	    		else if(numChar%100!=0) 
	    		{
	    			//double the array and copy it code missing for now
	    			String[] tempArray = new String[line.length*2];
	    			for(int i=0; i<line.length; i++)
	    				tempArray[i]=line[i];
	    			line = tempArray;
	    			line[(numWords+1)%100]=word;
	    			numWords++;	
	    		}
	    		else
	    			//need to start a new line
	    	}
	    }
	    }
	    
	 }
}
